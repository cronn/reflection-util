buildscript {
    repositories {
        mavenCentral()
    }
    dependencyLocking {
        lockAllConfigurations()
    }
}

plugins {
    id 'java-library'
    id 'jacoco'
    id 'maven-publish'
    id 'org.jreleaser' version 'latest.release'
    id 'org.sonarqube' version 'latest.release'
}

group = 'de.cronn'
version = '2.18.0'

if (System.env.BUILD_NUMBER) {
    version = "${version}-SNAPSHOT-b${System.env.BUILD_NUMBER}"
}

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs.addAll(['-Xlint:all,-serial,-overloads,-classfile', '-Werror'])
}

dependencies {
    components.all { ComponentMetadataDetails details ->
        if (details.id.version =~ /(?i).+(-|\.)(CANDIDATE|RC|BETA|ALPHA|PR|M\d+).*/) {
            details.status = 'milestone'
        }
    }
}

jacocoTestReport {
    reports {
        xml.required = true
    }
    dependsOn test
}

wrapper {
    gradleVersion = "8.14.1"
    distributionType = Wrapper.DistributionType.ALL
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version
            pom {
                name = project.name
                description = 'Java Reflection Utility Classes'
                url = 'https://github.com/cronn/reflection-util'

                licenses {
                    license {
                        name = "The Apache Software License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        distribution = "repo"
                    }
                }

                developers {
                    developer {
                        id = "benedikt.waldvogel"
                        name = "Benedikt Waldvogel"
                        email = "benedikt.waldvogel@cronn.de"
                    }
                    developer {
                        id = "mark.s.fischer"
                        name = "Mark S. Fischer"
                        email = "reflection-util.x.msf@spam-en.de"
                    }
                }

                scm {
                    url = "https://github.com/cronn/reflection-util"
                }
            }

            from components.java

            artifact sourcesJar
            artifact javadocJar

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
    repositories {
        maven {
            name = 'staging'
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }
}

jreleaser {
    signing {
        active = 'RELEASE'
        armored = true
        mode = 'COMMAND'
        command {
            executable = 'gpg'
            keyName  = System.getenv('JRELEASER_GPG_KEYNAME')
        }
    }
    deploy {
        maven {
            mavenCentral {
                sonatype {
                    active = 'RELEASE'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository('build/staging-deploy')
                }
            }
        }
    }
}

test {
    useJUnitPlatform()

    maxHeapSize = "256m"
}

dependencies {
    implementation "net.bytebuddy:byte-buddy:latest.release"
    implementation "org.objenesis:objenesis:latest.release"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:latest.release'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:latest.release'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:latest.release'
    testImplementation "org.mockito:mockito-core:latest.release"
    testImplementation "org.assertj:assertj-core:latest.release"
    testImplementation "jakarta.validation:jakarta.validation-api:latest.release"
    testImplementation "org.apache.commons:commons-lang3:latest.release"
    testImplementation "org.javassist:javassist:latest.release"
    testImplementation "nl.jqno.equalsverifier:equalsverifier:latest.release"

    testImplementation 'org.hibernate.orm:hibernate-core:latest.release'
    testRuntimeOnly 'com.h2database:h2:latest.release'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testImplementation "org.openjdk.jmh:jmh-core:latest.release"
    testRuntimeOnly "org.openjdk.jmh:jmh-generator-annprocess:latest.release"

    // no real transitive dependency but we use it to annotate method contracts to help the IDE understand the code
    compileOnly "org.jetbrains:annotations:latest.release"
    testCompileOnly "org.jetbrains:annotations:latest.release"

    dependencyLocking {
        lockAllConfigurations()
    }

    components.all { ComponentMetadataDetails details ->
        if (details.id.version =~ /(?i).+(-|\.)(CANDIDATE|RC|BETA|ALPHA|PR|M\d+|CR\d+).*/) {
            details.status = 'milestone'
        }
    }
}
