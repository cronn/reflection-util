buildscript {
    repositories {
        mavenCentral()
    }
    dependencyLocking {
        lockAllConfigurations()
    }
    dependencies {
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:latest.release")
    }
}

plugins {
    id 'maven-publish'
    id 'signing'
    id 'jacoco-report-aggregation'
}

if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_11)) {
    apply plugin: 'org.sonarqube'
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'jacoco'

    group = 'de.cronn'
    version = "2.14.0"

    if (System.env.BUILD_NUMBER) {
        version = "${version}-SNAPSHOT-b${System.env.BUILD_NUMBER}"
    }

    repositories {
        mavenCentral()
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    compileJava.options.encoding = 'UTF-8'

    dependencies {
        components.all { ComponentMetadataDetails details ->
            if (details.id.version =~ /(?i).+(-|\.)(CANDIDATE|RC|BETA|ALPHA|PR|M\d+).*/) {
                details.status = 'milestone'
            }
        }
    }

    dependencyLocking {
        lockAllConfigurations()
    }

    jacocoTestReport {
        reports {
            xml.required = true
        }
        dependsOn test
    }
}

wrapper {
    gradleVersion = "8.2"
    distributionType = Wrapper.DistributionType.ALL
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version
            pom {
                name = project.name
                description = 'Java Reflection Utility Classes'
                url = 'https://github.com/cronn/reflection-util'

                licenses {
                    license {
                        name = "The Apache Software License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        distribution = "repo"
                    }
                }

                developers {
                    developer {
                        id = "benedikt.waldvogel"
                        name = "Benedikt Waldvogel"
                        email = "benedikt.waldvogel@cronn.de"
                    }
                    developer {
                        id = "mark.s.fischer"
                        name = "Mark S. Fischer"
                        email = "reflection-util.x.msf@spam-en.de"
                    }
                }

                scm {
                    url = "https://github.com/cronn/reflection-util"
                }
            }

            from components.java

            artifact sourcesJar
            artifact javadocJar

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username = project.hasProperty('nexusUsername') ? project.property('nexusUsername') : System.getenv('NEXUS_USERNAME')
                password = project.hasProperty('nexusPassword') ? project.property('nexusPassword') : System.getenv('NEXUS_PASSWORD')
            }
        }
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.mavenJava
}

test {
    useJUnitPlatform()

    maxHeapSize = "256m"

    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
        jvmArgs += '-XX:+ShowCodeDetailsInExceptionMessages'
    }
}

dependencies {
    implementation "net.bytebuddy:byte-buddy:latest.release"
    implementation "org.objenesis:objenesis:latest.release"

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: 'latest.release'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: 'latest.release'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: 'latest.release'
    testImplementation "org.mockito:mockito-core:latest.release"
    testImplementation "org.assertj:assertj-core:latest.release"
    testImplementation "javax.validation:validation-api:latest.release"
    testImplementation "org.apache.commons:commons-lang3:latest.release"
    testImplementation "org.javassist:javassist:latest.release"
    testImplementation "nl.jqno.equalsverifier:equalsverifier:latest.release"

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testImplementation "org.openjdk.jmh:jmh-core:latest.release"
    testRuntimeOnly "org.openjdk.jmh:jmh-generator-annprocess:latest.release"

    // no real transitive dependency but we use it to annotate method contracts to help the IDE understand the code
    compileOnly "org.jetbrains:annotations:latest.release"
    testCompileOnly "org.jetbrains:annotations:latest.release"

    jacocoAggregation subprojects
}

tasks.named('check') {
    dependsOn tasks.named('testCodeCoverageReport', JacocoReport)
}
